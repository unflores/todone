#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

%w(rubygems commander/import todone).each{|requirement| require requirement}

version_file = File.join(File.dirname(__FILE__), '..', 'VERSION')

program :name,           'Todone'
program :description,    'a tool for better communication'
program :version,        File.read(version_file)
program :help_formatter, Commander::HelpFormatter::TerminalCompact
default_command :help


command :add_project do |cmd|
  cmd.syntax = "todone #{cmd.name}"
  cmd.summary = "Adds the current project to the config file"
  cmd.description = "#{cmd.summary}"
  cmd.when_called do |args, options|

		if Todone::MessageProcessor.needs_init?
			setup = {}
			setup[:api_key] = ask("API Key: ") {|q| q.echo = true} 
			setup[:owner]		= ask("Username: "){|q| q.echo = true} 
			Todone::MessageProcessor.init setup
		end
		options = {}
		options[:id]    = ask("Project id: ") {|q| q.echo = true}
		options[:users] = ask("Other users: "){|q| q.echo = true} 
		mp = Todone::MessageProcessor.new()
		puts mp.add_project(options)
  end
end

command :stats do |cmd|
  cmd.syntax = "todone #{cmd.name}"
  cmd.summary = "get some stats for the tickets you've completed"
  cmd.description = "#{cmd.summary}"
  cmd.when_called do |args, options|
   # 
  end
end

command :template do |cmd|
  cmd.syntax = "todone #{cmd.name}"
  cmd.summary = "print out an email template with"
  cmd.description = "#{cmd.summary}"
  cmd.when_called do |args, options|
   # 
  end
end

command :open_tickets do |cmd|
  cmd.syntax = "todone #{cmd.name}"
  cmd.summary = "print out a list of open tickets"
  cmd.description = "#{cmd.summary}"
  cmd.when_called do |args, options|
		mp = Todone::MessageProcessor.new(:project_id => 232039)
		puts mp.open_tickets 
  end
end
