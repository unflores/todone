#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

%w(rubygems commander/import todone).each{|requirement| require requirement}

version_file = File.join(File.dirname(__FILE__), '..', 'VERSION')

program :name,           'Todone'
program :description,    'a tool for better communication'
program :version,        File.read(version_file)
program :help_formatter, Commander::HelpFormatter::TerminalCompact
default_command :help

def ensure_config_exists!
	if Todone::MessageProcessor.needs_init?
		setup = {}
		setup[:api_key] = ask("API Key: ") {|q| q.echo = true} 
		setup[:owner]		= ask("Username: "){|q| q.echo = true} 
		Todone::MessageProcessor.init setup
	end
end

command :add_project do |cmd|
  cmd.syntax = "todone #{cmd.name}"
  cmd.summary = "Adds the current project to the config file"
  cmd.description = "#{cmd.summary}"
  cmd.when_called do |args, options|

		ensure_config_exists!

		options = {}
		options[:id]    = ask("Project id: ") {|q| q.echo = true}
		options[:users] = ask("Other users: "){|q| q.echo = true} 
		mp = Todone::MessageProcessor.new()
		puts mp.add_project(options)
  end
end

command :users do |cmd|
	cmd.syntax = "todone #{cmd.name}"
	cmd.summary = "display the users who the tickets will be filtered by"
	cmd.description = "#{cmd.summary}"
	cmd.when_called do |args, options|
		#
	end
end

command :daily_update do |cmd|
  cmd.syntax = "todone #{cmd.name}"
  cmd.summary = "print out an email template with"
  cmd.description = "#{cmd.summary}"
  cmd.when_called do |args, options|
		ensure_config_exists!
	 # 
  end
end

command :tickets do |cmd|
  cmd.syntax = "todone #{cmd.name} [options]"
  cmd.summary = "print out a list of open tickets"
	cmd.description = "#{cmd.summary}"
	cmd.option "-s","--started", "All tickets currently started"
	cmd.option "-d","--delivered", "All tickets delivered today"
	cmd.option "-a","--accepted", "All tickets accepted today"
	cmd.option "-w", "--write-file", "Write to file"
	cmd.option "--file [FILE]", String ,"File to write to.  Default is .git/COMMIT_EDITMSG"
  cmd.when_called do |args, options|
		ensure_config_exists!
		project_id = args.shift
		mp = Todone::MessageProcessor.new(:project_id => project_id)
		if options.write_file.nil?
			puts mp.view_tickets
		else
			mp.write_tickets :file => options.file
		end
  end
end
